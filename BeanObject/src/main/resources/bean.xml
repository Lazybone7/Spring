<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd">
    <!-- Spring对Bean的管理细节
        一. 创建Bean的三种方式
        二. Bean对象的作用范围
        三. Bean对象的生命周期
   -->
    <!-- 1. 使用默认构造函数创建
           在spring的配置文件中使用bean标签，配以id和class属性之后。且没有其他属性和标签时，
           采用的就是默认构造函数创建Bean对象。如果此时类中没用默认构造函数，则对象无法创建
    -->
<!--    <bean id="accountService" class="com.ithan.service.imp.IAccountServiceImp"></bean>-->

    <!-- 2. 使用普通工厂中的方法创建对象 （使用某个类中的方法创建对象，并存入Spring容器）-->
    <!--<bean id="instanceFactory" class="com.ithan.factory.InstanceFactory"></bean>-->
    <!--<bean id="accountService" factory-bean="instanceFactory" factory-method="getAccountService"></bean>-->


    <!--3. 使用工厂中的静态方法创建对象（使用某个类中的静态方法创建对象，并存入spring容器）-->
    <!--<bean id="accountService" class="com.ithan.factory.StaticFactory" factory-method="getAccountService"></bean>-->

    <!--bean标签的作用范围
        1. bean标签的scope属性
            singleton：单例的（默认值）常用
            prototype: 多例的 常用
            request：作用于web应用的请求范围
            session：作用于web应用的会话范围
            globe-session：作用于集群环境的会话范围（全局会话范围）。当不是集群环境就是session
    -->
    <!--<bean id="accountService" class="com.ithan.service.imp.IAccountServiceImp" scope="prototype"></bean>-->

    <!--bean对象的生命周期
        单例对象：
            当容器创建时对象出生
            容器还在，对象就活着
            容器销毁，对象就死亡
            单例对象的生命周期与容器相同
        多例对象：
            使用对象时创建
            对象在使用过程中一直活着
            当对象长时间不用，且没有别的对象引用时，由Java的垃圾回收器回收-->
    <bean id="accountService" class="com.ithan.service.imp.IAccountServiceImp" init-method="init" destroy-method="destory"></bean>
</beans>